import numpy as np
import pandas as pd
from IPython.display import display 

%matplotlib inline

# import data
data = pd.read_csv("d:\\census.csv")

display(data.head(n=3))

income_raw = data['income']
features_raw = data.drop('income', axis = 1)

skewed = ['capital-gain', 'capital-loss']
features_raw[skewed] = data[skewed].apply(lambda x: np.log(x + 1))

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
numerical = ['age', 'education-num', 'capital-gain', 'capital-loss', 'hours-per-week']
features_raw[numerical] = scaler.fit_transform(data[numerical])

features = pd.get_dummies(features_raw)
pd.get_dummies(features_raw)

income = pd.get_dummies(income_raw)
income=income.iloc[:,1]

encoded = list(features.columns)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, income, test_size = 0.2, random_state = 0)

from sklearn.metrics import  accuracy_score

#定义模型
def train_predict(learner, sample_size, X_train, y_train, X_test, y_test): 
    '''
    输出参数:
       - learner: 模型
       - sample_size: 样本大小
       - X_train: 训练集
       - y_train: 训练标签
       - X_test: 测试集
       - y_test: 测试标签
    '''
    
    results = {}
    X_train=X_train[0:sample_size]
    y_train=y_train[0:sample_size]
    learner = learner.fit(X_train,y_train)

    predictions_test = learner.predict(X_test)
    predictions_train = learner.predict(X_train[0:200])

    results['acc_train'] = accuracy_score(y_pred=predictions_train,y_true=y_train[0:200])

    results['acc_test'] = accuracy_score(y_pred=predictions_test,y_true=y_test)
 
    return results
    
from  sklearn.svm import SVC
from  sklearn.tree  import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression

clf_A = SVC()
clf_B = DecisionTreeClassifier()
clf_C = LogisticRegression()


samples_1 = int( len(y_train) * 0.01 )
samples_2 = int(len(y_train) * 0.1)
samples_3 = int(len(y_train) * 0.4)



results = {}
for clf in [clf_A, clf_B, clf_C]:
    clf_name = clf.__class__.__name__
    results[clf_name] = {}
    for i, samples in enumerate([samples_1, samples_2, samples_3]):
        results[clf_name][i] = train_predict(clf, samples, X_train, y_train, X_test, y_test)
        
results["LogisticRegression"]
results["SVC"]
results['DecisionTreeClassifier'] 
